{"meta":{"title":"Macfred's page","subtitle":null,"description":null,"author":"macfred","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"ADB remote debug","slug":"ADB-remote-debug","date":"2019-03-30T15:45:30.000Z","updated":"2019-03-30T19:00:05.046Z","comments":true,"path":"2019/03/30/ADB-remote-debug/","link":"","permalink":"http://yoursite.com/2019/03/30/ADB-remote-debug/","excerpt":"","text":"Sometimes we may need to work on a remote machine, edit or debug .etc, in which case adb seems not working at all, because it must be running on a local machine. Emulator device might be helpful, however, we just need to debug on a specific device ocationaly. Here comes the solution. PreparationsADB is implemented on a classic Client-Server structure, in which server side interact with android device on usb link, and is involked by client through port 5037. The only step is just simply connect adb client running on remote machine with adb server on local machine using port forwarding.You need to install Android SDK on both local and remote machines, and add {ANDROID_SDK}/platform_tools folder as environment variable. ADB server sideIn our solution, adb server runs on local machine. Except adb server, SSH server are needed as well which provides port forwarding funcionality. In our case we use Bitwise SSH server on windows platform, you might choose your own favorable implementaton on other platform. ADB client sideADB clinet runs on remote machine, what we have to do is just simply connect to ssh server from remote machine. On windows, Putty is a popular ssh clinet, go with the following steps. Input ip and ssh port of your local machine. Add 5037 as forwarded port, and let localhost:5037 be destination. Save putty configuration for later reuse. Connect to ssh server. Final setupBefore everything is done, we have to verify that adb client on remote machine can recongize adb server on local machine. On local machine, open a cmd terminal, input “adb devices“ command to detect connected android devices. You can also do this in ssh session terminal from remote machine. Go to next step if your devices are listed in the output. On remote machine, open a cmd terminal, input “adb devices“ command. If your devices are listed again here, congrate! You can now work on adb remote debug session! Important notice You must ensure that adb on both machine are of the same version, refer to “adb version“ command for more information. On adb client side, if adb server cannot be recongized, adb client will start a adb server on the same machine, after this adb server on local machine won’t recongized any more. You must start adb server on local machine and open ssh session before everything, ensure that adb server won’t be running on remote machine. It is highly recommended that start Android Studio after adb remote debug session is established. You can use adb client function on both local and remote machine at the same time, however, only one debug session can be setup up at a time. You might have to terminate Android Studio for another machine machine to seize control of debugging. Some Android device manager utility on desktop may be integrated with adb in it’s own package, if you have installed this on your remote machine, it may interfere with our setup! Keep that in mind if remote debug just don’t work when everything seems to be done.","categories":[],"tags":[]}]}